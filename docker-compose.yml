version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgis/postgis:14-3.2
    container_name: property_intelligence_db
    environment:
      POSTGRES_DB: property_intelligence
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - property_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: property_intelligence_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - property_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: property_intelligence_backend
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/property_intelligence
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    volumes:
      - ./backend:/app
      - model_cache:/app/models
    networks:
      - property_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: property_intelligence_worker
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/property_intelligence
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./backend:/app
      - model_cache:/app/models
    networks:
      - property_network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: property_intelligence_scheduler
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/property_intelligence
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./backend:/app
    networks:
      - property_network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: property_intelligence_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_MAPBOX_TOKEN=${MAPBOX_ACCESS_TOKEN}
      - REACT_APP_GOOGLE_MAPS_KEY=${GOOGLE_MAPS_API_KEY}
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - property_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: property_intelligence_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - property_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  model_cache:

networks:
  property_network:
    driver: bridge